🔷 Creating Stored Access Policies

🎯 **Objective:**
Create a stored access policy for a Blob container to manage access permissions securely.

🌟 **Why does this matter?:**
Using stored access policies with shared access signatures (SAS) enables centralized management of access permissions. Changing the policy affects all SAS associated with it, enhancing security and ease of access control.

💡 **Use cases:**
- Secure access for third-party applications
- Granular access control for sensitive data
- Simplifying access management for multiple SAS tokens

🛠️ **Steps to completion:**

1. **Create a stored access policy for a Blob container:**
   - Use the Azure portal to create a new stored access policy named `patient-access-policy` with Read and List permissions.
     ```bash
     az storage container policy create --account-name <storage_account_name> --container-name <container_name> --name patient-access-policy --permissions rl --start <start_time> --expiry <expiry_time>
     ```

2. **Upload a file to the Blob container:**
   - Upload a PNG or JPEG file to the Blob container if not already done.
     ```bash
     az storage blob upload --account-name <storage_account_name> --container-name <container_name> --name <blob_name> --file <path_to_file>
     ```

3. **Generate a SAS URL with the stored access policy:**
   - Generate a SAS token and create the corresponding URL using the stored access policy.
     ```bash
     sasToken=$(az storage blob generate-sas --account-name <storage_account_name> --container-name <container_name> --name <blob_name> --policy-name patient-access-policy --output tsv)
     sasUrl="https://${storage_account_name}.blob.core.windows.net/${container_name}/${blob_name}?${sasToken}"
     echo $sasUrl
     ```

4. **Test the SAS URL:**
   - Open the SAS URL in a browser or use a tool like `curl` to verify access.
     ```bash
     curl -v $sasUrl
     ```

5. **Clean up resources:**
   - Delete resources to avoid unnecessary costs.
     ```bash
     az storage account delete --name <storage_account_name> --resource-group <resource_group_name>
     ```

⚡ **Tip:**
Always assess whether you need the resources post-exercise to avoid extra costs.

---

In this work sample, I successfully created and tested a stored access policy for a Blob container, demonstrating my ability to manage access permissions in Azure storage. This showcases my proficiency in secure access control and Azure management. 🛡️
